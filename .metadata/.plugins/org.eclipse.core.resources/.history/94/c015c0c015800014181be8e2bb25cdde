package graphics;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

import core.Loop;

public class PixelCanvas extends Canvas {

	private static final long serialVersionUID = 3186557580516093308L;
	private EpicDisplay display;
	private BufferedImage img;
	private int[] pixels;
	
	public PixelCanvas() {
		DisplayManager.setScale(10);
		display = new EpicDisplay(DisplayManager.getFrameWidth(), DisplayManager.getFrameHeight());
		img = new BufferedImage(DisplayManager.getFrameWidth(), DisplayManager.getFrameHeight(), BufferedImage.TYPE_INT_RGB);
		pixels = ((DataBufferInt)img.getRaster().getDataBuffer()).getData();
		
		Toolkit.getDefaultToolkit().setDynamicLayout(false);
	}
	
	
	public void render() {
	
		BufferStrategy bs = this.getBufferStrategy();
		
		if (bs == null) {
			this.createBufferStrategy(3);
			this.requestFocus();
			return;
		}
		
		Graphics g = bs.getDrawGraphics();
		//g.setColor(Color.BLACK);
		//g.fillRect(0, 0, DisplayManager.getFrameWidth(), DisplayManager.getFrameHeight());
		
		display.render(g, Loop.getGame());
		for (int i = 0; i < (DisplayManager.getFrameWidth() * DisplayManager.getFrameHeight()); i++) {
			pixels[i] = display.pixels[i];
		}
		
		g.drawImage(img, 0, 0, img.getWidth() * DisplayManager.getScale(), img.getHeight() * DisplayManager.getScale(), null);
		
		g.dispose();
		bs.show();
	}
	
	@Override
	public void paint(Graphics g) {
		if (Loop.getGame() == null) {
			return;
		}
		DisplayManager.setFrameWidth(Loop.getGame().getCanvas().getWidth());
		DisplayManager.setFrameHeight(Loop.getGame().getCanvas().getHeight());
	}
}
